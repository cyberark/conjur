%h2#oracle__password Oracle database password

%span.label.label-conjur
  requires Conjur v4.9.8.0 or newer
%br
%br

:markdown
    Rotates an Oracle database user's password to a random value on a configured schedule. The rotator automatically expires and regenerates a password value stored in the Conjur environment. It also updates the corresponding password value on the target database.  This rotator is tested and verified against Oracle Database v11.2.0.2.  MySQL is not supported.

  <a id="required_setup"></a>
  ### Required System Setup for Oracle Database Password Rotator
  [id]:#required_setup
  The following integration steps are required to enable the Oracle database password rotator. This is a one-time procedure for each Conjur master container.

  <div class="note">
  <p>
  The rotator requires the Oracle Instant Client libraries to connect to an Oracle database. You must download these libraries directly from Oracle, as described below.
  </p>
  </div>

    1.  Verify your Conjur version:

      ```
      $ conjur version
      ```

    2.  If the version is earlier than v4.9.8.0, you need to upgrade to version v4.9.8.0 or later.

    3.	Now download required Oracle Instant Client libraries:

          - Go to http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html

          - Accept the license agreement.

          - Download these packages for **Version 12.2.0.1.0**:

            -	Instant Client Package - Basic:

              `oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm`

            -  Instant Client Package - SDK

                `oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm`

  4.	Copy the RPMs into `/tmp` in the Conjur container:

      ```
      $ for f in oracle-instantclient*.rpm; do
         docker cp $f conjur-appliance:/tmp/.
         done
     ```

  5.	From inside the docker container, run the `setup-ora.sh` script to complete the setup. The script includes a restart of the rotator service.

      ```
      $ docker exec conjur-appliance /opt/conjur/rotation/bin/setup-ora.sh
      ```

      Check the output from the script to ensure that it ran without error.

    Once installed, you can confirm that the Oracle rotator is available using the API entrypoint described
      <a href="https://conjur.docs.apiary.io/#reference/rotation/active-rotators/list-active-variable-rotators">here</a>.

  ###  Predefined Variables and Annotations

  A rotator is defined with a policy, using predefined variable names and annotations.
  Here are the predefined variable names and annotations for an Oracle database password rotator. Variable values are assigned later using the `variable values add` command.

  ####url
   `- !variable url`

   Stores the connection identifier for a database.
  Use the following format when assigning a value:

  `host:port/Oracle_database_SID`

  Example:
  ` foo.example.us-east-1.myorg.com:1521/ORCL`

  ####username
   `- !variable username`

   Stores a username defined in the Oracle database. The username must have appropriate permissions, such as permission to change its own password.

  ####password

   ```yaml
   - !variable
     id: password
     annotations:
       rotation/rotator: oracle/password
       rotation/ttl: <ttl_value>
       rotation/password/length: "<num>"
   ```

  Stores an initial password as set in the Oracle database. Strong initial passwords are recommended.

  There are required and optional annotations on the password variable.

  * `rotation/rotator: oracle/password`

      Required. Identifies the variable to be rotated. Use the constant value `oracle/password`.

  * `rotation/ttl: <ttl_value>`

    Required. Sets the time-to-live duration of a password variable.

    `<ttl_value>`  defines how long the password variable uses the same value before rotating to a new value. Use the standard ISO-8601 duration format. For format details, see <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">https://en.wikipedia.org/wiki/ISO_8601#Durations</a>.

     Examples:

    ```
    rotation/ttl:  P1D    # sets a period of 1 day
    rotation/ttl:  P2W    # sets a period of 2 weeks
    ```


  * `rotation/password/length: "num"`

    Optional. Sets the length of the passwords that will be generated by the rotator. Default: 20. Maximum: 30.

    Oracle does not support passwords longer than 30 characters.
    The `<num>` is the number of characters in a generated  password.

    Example:

    `rotation/password/length: "30"`

  ###Connection Details

  The rotator service connects to an Oracle database using values assigned to the url, username, and password variables.  The connection string is:

   `username/password@url`

  The user must have the permission to  perform a password reset or password update for itself on the target database.

  ###Procedure: Create an Oracle Database Password Rotator

  1.	Complete all steps in <a href="#required_setup">Required System Setup for Oracle Database Password Rotator</a>.
  2.	Create a policy that defines an Oracle database password rotator:

       - Copy the following into a text file.

         ```yaml
         - !policy
              id: <policy_id>
              body:
              - &variables
                - !variable url
                - !variable username
                - !variable
                   id: password
                   annotations:
                     rotation/rotator: oracle/password
                     rotation/ttl: <ttl_value>
                     rotation/password/length: "<num>"
          ```

       - Replace `<policy_id>` with a unique policy identifier.

         You will define a separate policy for each Oracle database whose passwords you want to rotate. A best practice is to include the Oracle SID in the policy id. For example: `db/ORCL`

      - Replace `<ttl_value>` with a duration value, using [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) conventions. For example,  to specify that passwords on this database rotate every 1 day, use the value `P1D`.

      - Replace `<num>` or remove that optional annotation. If removed, the generated passwords are 20 characters long. The maximum supported length is 30.

      - Save the file as a .yml.

  3.	Load the policy.

       ```
       $ conjur policy load --as-group --branch security_admin --file <filename>.yml
       ```

        where `<filename>` is the policy file.

  4.	Use Conjur commands to assign values to the url, username, and password variables. Three commands are required, one for each variable.

      ```
      $ conjur variable set --id <oracle_rotator_policy_id>/url --value <url_value>
      $ conjur variable set --id <oracle_rotator_policy_id>/username --value <username_value>
      $ conjur variable set --id <oracle_rotator_policy_id>/password --value <initial_password_value>
      ```

      Where:

      `<url_value>` is in the form `host:port/oracle_SID`

      `<username_value>` is a username on the target url.

      `<initial_password_value>` is the initial password for the username in the target url. Initial passwords should be strong values.

  5.	If the username and associated initial password used in the previous step does not yet exist in the Oracle database, create it now with your Oracle administration tools.  The user must have privileges that allow changing its own password.

  6.	Trigger the start of rotation by expiring the password variable for this policy:

  	```
    $ conjur variable expire --now --id <rotator_policy_id>/password
    ```

  7.	 To verify rotation, query Conjur to obtain the rotated password value and use that value to sign in.

      One method is to use the `conjur variable value` command to assign the password value to a system variable and use that for signing in, as follows:


      ```
        $ PASSWORD=$(conjur variable get --id <rotator_policy_id>/password)

        $ sqlplus <username>/$PASSWORD@<url>
      ```




  ### Example

  1. Load a policy defining the required variables with a common prefix and annotations:

      ```yml
      - !policy
        id: db/ORCL
        body:
          - &variables
            - !variable url
            - !variable username
            - !variable
              id: password
              annotations:
                rotation/rotator: oracle/password
                rotation/ttl: P1D # 1 day
                rotation/password/length: "30"
      ```

      ```sh-session
      $ conjur policy load --as-group --branch security_admin --file policy.yml
      ```

      Set values for the variables:

      ```sh-session
      $ conjur variable set --id db/ORCL/url --value oradb.myorg.com:1521/ORCL
      $ conjur variable set --id db/ORCL/username --value 'budgeting'
      $ conjur variable set --id db/ORCL/password --value 'initialpass'  # use a strong password!
      ```

      In this example, the connect string `budgeting/intialpass@oradb.myorg.com:1521/ORCL` will be used to connect to Oracle.

  2. Create Oracle user

      ```sh-session
      $ sqlplus / as sysdba
      SQL> create user budgeting identified by initialpass;

      User created.

      SQL> grant resource to budgeting;

      Grant succeeded.

      SQL> grant create session to budgeting;

      Grant succeeded.
      SQL> quit
      ```

  3. Expire the password variable to trigger rotation:

      ```sh-session
      $ conjur variable expire --now --id db/ORCL/password
      ```

  4. Fetch the new password and log into Oracle:

      ```sh-session
      $ PASSWORD=$(conjur variable get --id db/ORCL/password)
      $ sqlplus budgeting/$PASSWORD@oradb.myorg.com:1521/ORCL

      SQL*Plus: Release 11.2.0.2.0 Production on Tue Sep 26 18:22:25 2017

      Copyright (c) 1982, 2011, Oracle.  All rights reserved.


      Connected to:
      Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production

      SQL>
      ```
%hr
