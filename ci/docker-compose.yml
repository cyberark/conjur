version: "3"
services:
  pg:
    image: postgres:15
    environment:
      # To avoid the following error:
      #
      #   Error: Database is uninitialized and superuser password is not
      #   specified.  You must specify POSTGRES_PASSWORD for the superuser. Use
      #   "-e POSTGRES_PASSWORD=password" to set it in "docker run".
      #
      #   You may also use POSTGRES_HOST_AUTH_METHOD=trust to allow all
      #   connections without a password. This is *not* recommended. See
      #   PostgreSQL documentation about "trust"
      POSTGRES_HOST_AUTH_METHOD: trust

  pg2:
    image: postgres:15
    environment:
      # To avoid the following error:
      #
      #   Error: Database is uninitialized and superuser password is not
      #   specified.  You must specify POSTGRES_PASSWORD for the superuser. Use
      #   "-e POSTGRES_PASSWORD=password" to set it in "docker run".
      #
      #   You may also use POSTGRES_HOST_AUTH_METHOD=trust to allow all
      #   connections without a password. This is *not* recommended. See
      #   PostgreSQL documentation about "trust"
      POSTGRES_HOST_AUTH_METHOD: trust

  audit:
    image: postgres:15
    environment:
      # See description on `pg` service for use of POSTGRES_HOST_AUTH_METHOD
      POSTGRES_HOST_AUTH_METHOD: trust

  testdb:
    image: postgres:15
    environment:
      # To avoid the following error:
      #
      #   Error: Database is uninitialized and superuser password is not
      #   specified.  You must specify POSTGRES_PASSWORD for the superuser. Use
      #   "-e POSTGRES_PASSWORD=password" to set it in "docker run".
      #
      #   You may also use POSTGRES_HOST_AUTH_METHOD=trust to allow all
      #   connections without a password. This is *not* recommended. See
      #   PostgreSQL documentation about "trust"
      POSTGRES_HOST_AUTH_METHOD: trust

  testdb2:
    image: postgres:15
    environment:
      # To avoid the following error:
      #
      #   Error: Database is uninitialized and superuser password is not
      #   specified.  You must specify POSTGRES_PASSWORD for the superuser. Use
      #   "-e POSTGRES_PASSWORD=password" to set it in "docker run".
      #
      #   You may also use POSTGRES_HOST_AUTH_METHOD=trust to allow all
      #   connections without a password. This is *not* recommended. See
      #   PostgreSQL documentation about "trust"
      POSTGRES_HOST_AUTH_METHOD: trust

  conjur:
    image: "conjur-test:${TAG}"
    environment:
      DATABASE_URL: postgres://postgres@pg/postgres
      CONJUR_ADMIN_PASSWORD: ADmin123!!!!
      CONJUR_ACCOUNT: cucumber
      CONJUR_DATA_KEY:
      RAILS_ENV:
      REQUIRE_SIMPLECOV: "true"
      CONJUR_LOG_LEVEL: debug
      CONJUR_AUTHENTICATORS: authn-ldap/test,authn-ldap/secure,authn-oidc/keycloak,authn-oidc,authn-k8s/test,authn-azure/prod,authn-gcp,authn-jwt/raw,authn-jwt/keycloak,authn-oidc/keycloak2,authn-oidc/okta-2
      LDAP_URI: ldap://ldap-server:389
      LDAP_BASE: dc=conjur,dc=net
      LDAP_FILTER: '(uid=%s)'
      LDAP_BINDDN: cn=admin,dc=conjur,dc=net
      LDAP_BINDPW: ldapsecret
      WEB_CONCURRENCY: 0
      RAILS_MAX_THREADS: 10
    command: server
    volumes:
      - authn-local:/run/authn-local
      # TODO: authenticators_oidc/test has a dep on this
      - ./oauth/keycloak:/oauth/keycloak/scripts
      - ./ldap-certs:/ldap-certs:ro
      - log-volume:/opt/conjur-server/log
      - ../coverage:/opt/conjur-server/coverage
    expose:
      - "80"
    links:
      - pg
      - ldap-server
      - keycloak

  conjur2:
    image: "conjur-test:${TAG}"
    environment:
      DATABASE_URL: postgres://postgres@pg2/postgres
      CONJUR_ADMIN_PASSWORD: ADmin123!!!!
      CONJUR_ACCOUNT: cucumber
      CONJUR_DATA_KEY:
      RAILS_ENV:
      REQUIRE_SIMPLECOV: "true"
      CONJUR_LOG_LEVEL: debug
      CONJUR_AUTHENTICATORS: authn-ldap/test,authn-ldap/secure,authn-oidc/keycloak,authn-oidc,authn-k8s/test,authn-azure/prod,authn-gcp,authn-jwt/raw,authn-jwt/keycloak,authn-oidc/keycloak2,authn-oidc/okta-2
      LDAP_URI: ldap://ldap-server:389
      LDAP_BASE: dc=conjur,dc=net
      LDAP_FILTER: '(uid=%s)'
      LDAP_BINDDN: cn=admin,dc=conjur,dc=net
      LDAP_BINDPW: ldapsecret
      WEB_CONCURRENCY: 0
      RAILS_MAX_THREADS: 10
    command: server
    volumes:
      # TODO: authenticators_oidc/test has a dep on this
      - authn-local2:/run/authn-local
      - ./oauth/keycloak:/oauth/keycloak/scripts
      - ./ldap-certs:/ldap-certs:ro
      - log-volume:/opt/conjur-server/log
      - ../coverage:/opt/conjur-server/coverage
    expose:
      - "80"
    links:
      - pg2
      - ldap-server
      - keycloak

  cucumber:
    image: conjur-test:$TAG
    entrypoint: bash
    working_dir: /src/conjur-server
    environment:
      CONJUR_ACCOUNT: cucumber
      AUDIT_DATABASE_URL:
      RAILS_ENV: test
      CONJUR_LOG_LEVEL: debug
      CONJUR_DATA_KEY:
      REPORT_ROOT:
      CUCUMBER_NETWORK:
      INFRAPOOL_CUCUMBER_FILTER_TAGS:
      # TODO: Where should we be running rspec tests from, ideally?
      # See https://github.com/DatabaseCleaner/database_cleaner#safeguards
      DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: "true"
    volumes:
      - ..:/src/conjur-server
      - authn-local:/run/authn-local
      - authn-local2:/run/authn-local2
      - ./ldap-certs:/ldap-certs:ro
      - log-volume:/src/conjur-server/log
      - jwks-volume:/var/jwks
      - ./oauth/keycloak:/oauth/keycloak/scripts
    links:
      - conjur
      - conjur2
      - pg
      - pg2
      - testdb
      - testdb2
      - keycloak

  ldap-server:
    image: osixia/openldap
    command: --copy-service --loglevel debug
    hostname: ldap-server
    environment:
      LDAP_ORGANISATION: CyberArk
      LDAP_DOMAIN: conjur.net
      LDAP_ADMIN_PASSWORD: ldapsecret
      LDAP_TLS_DH_PARAM_FILENAME: "dhparam.pem"
      LDAP_TLS_CA_CRT_FILENAME: "ca-chain.cert.pem"
      LDAP_TLS_CRT_FILENAME: "ldap-server.cert.pem"
      LDAP_TLS_KEY_FILENAME: "ldap-server.key.pem"
      LDAP_TLS_VERIFY_CLIENT: try
    volumes:
      - ./test_suites/authenticators_ldap/ldap-data:/container/service/slapd/assets/config/bootstrap/ldif/custom
      - ./ldap-certs:/container/service/slapd/assets/certs:ro

  keycloak:
    image: jboss/keycloak:4.3.0.Final
    ulimits:
      nofile:
        soft: 6114
        hard: 6114
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - KEYCLOAK_APP_USER=alice
      - KEYCLOAK_APP_USER_PASSWORD=alice
      - KEYCLOAK_APP_USER_EMAIL=alice@conjur.net
      - KEYCLOAK_SECOND_APP_USER=bob.somebody
      - KEYCLOAK_SECOND_APP_USER_PASSWORD=bob
      - KEYCLOAK_SECOND_APP_USER_EMAIL=bob@conjur.net
      - KEYCLOAK_NON_CONJUR_APP_USER=not_in_conjur
      - KEYCLOAK_NON_CONJUR_APP_USER_PASSWORD=not_in_conjur
      - KEYCLOAK_NON_CONJUR_APP_USER_EMAIL=not_in_conjur
      - DB_VENDOR=H2
      - KEYCLOAK_CLIENT_ID=conjurClient
      - KEYCLOAK_REDIRECT_URI=http://conjur:3000/authn-oidc/keycloak2/cucumber/authenticate
      - KEYCLOAK_CLIENT_SECRET=1234
      - KEYCLOAK_SCOPE=openid
    volumes:
      # TODO: authenticators_oidc/test has a dep on this
      - ./oauth/keycloak:/scripts
      - ./oauth/keycloak/standalone.xml:/opt/jboss/keycloak/standalone/configuration/standalone.xml

  jwks:
    image: nginx
    networks:
      default:
        aliases:
          - chained.mycompany.local
    volumes:
      - jwks-volume:/usr/share/nginx/html
      - ./oauth/jwks/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./oauth/jwks:/tmp
    entrypoint: sleep
    command: infinity

  jwks_py:
    image: python:3
    ports:
      - 8090:8090
    entrypoint:
      - bash
      - -c
    command:
      - |
        pip install -r /usr/src/jwks/requirements.txt
        python /usr/src/jwks/jwks_server.py -p 8090
    volumes:
      - ./jwt/:/usr/src/jwks/

volumes:
  authn-local:
  authn-local2:
  log-volume:
  jwks-volume:
