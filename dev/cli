#!/bin/bash -e

function print_help() {
  cat << EOF
NAME
    cli - Development tool to simplify working with a Conjur container.

SYNOPSIS
    cli [global options] command [command options] [arguments...]
GLOBAL OPTIONS
    --help                                    - Show this message
COMMANDS
    exec                                      - Steps into the running Conjur container, into a bash shell.

    key                                       - Displays the admin user API key

    policy load <account> <policy/path.yml>   - Loads a conjur policy into the provided account.
EOF
exit
}

function print_exec_help() {
  cat << EOF
NAME
    exec - Steps into the running Conjur container, into a bash shell.

SYNOPSIS
    exec [global options] command [command options] [arguments...]
GLOBAL OPTIONS
    --help                                    - Show this message
COMMANDS
    --authn-oidc    Enables OIDC features
    --authn-azure   Enables Azure features
    --authn-gcp     Enables GCP features
    --authn-jwt     Enables JWT features
EOF
exit
}

function print_gcp_help() {
  cat << EOF
NAME
    --authn-gcp - Enables GCP features, in order to run local tests.

SYNOPSIS
    --authn-gcp [command options] [arguments...]
GLOBAL OPTIONS
    --help                                    - Show this message
COMMANDS
    --gce     Google compute engine instance name
    --gcf     Google cloud function URL (Predefined ci/test_suites/authenticators_gcp/function/main.py code as GCF)
USAGE
    ./cli exec --authn-gcp --gce [GCE_INSTANCE_NAME] --gcf [GCF_URL]
EOF
exit
}

function handle_gcp() {
  local gcp_params="${@:1:4}"
  validate_gcp_options_and_args $gcp_params
  enable_gcp $gcp_params
}

function validate_gcp_options_and_args() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    print_gcp_help
    exit 1
  elif [ -z "$1" ];  then
    echo "--gce,--gcf required command options are missing"
    print_gcp_help
    exit 1
  fi

  local params_count=$#
  while [ $params_count -gt 0 ]
  do
     local option=$1
     local option_arg=$2
     validate_gcp_option $option $option_arg

     shift 2
     params_count=$(( $params_count - 2 ))
  done
}

function validate_gcp_option() {
  local option=$1
  local option_arg=$2
  case "$option" in
    --gce | --gcf ) validate_gcp_arguments_exist $option $option_arg ;;
    * ) echo "$option is not a valid option"; print_gcp_help; exit 1;;
  esac
}

function validate_gcp_arguments_exist() {
  local option=$1
  local option_arg=$2
  if [ -z "$option_arg" ]; then
    echo "argument is missing for $option option"
    exit 1
  fi
}

function enable_gcp() {
  local params_count=$#
  while [ $params_count -gt 0 ]
  do
    local option=$1
    local option_arg=$2

    case "$option" in
      --gce ) fetch_gce_tokens $option_arg ;;
      --gcf ) fetch_gcf_tokens $option_arg ;;
    esac

     shift 2
     params_count=$(( $params_count - 2 ))
  done
}

function fetch_gce_tokens() {
  local gce_instance_name="$1"

 "../ci/test_suites/authenticators_gcp/get_gcp_id_tokens.sh" "$gce_instance_name"
  _set_gcp_token_payload "../ci/test_suites/authenticators_gcp/tokens/gce_token_valid"
  echo "Setting GCE details as env variables"
  local gce_project_id="$(echo "$DECODED_GCP_TOKEN_PAYLOAD" | jq -r '.google.compute_engine.project_id')"
  local gce_instance_name="$(echo "$DECODED_GCP_TOKEN_PAYLOAD" | jq -r '.google.compute_engine.instance_name')"
  local gce_service_account_id="$(echo "$DECODED_GCP_TOKEN_PAYLOAD" | jq -r '.sub')"
  local gce_service_account_email="$(echo "$DECODED_GCP_TOKEN_PAYLOAD" | jq -r '.email')"

  local gce_env_args="-e GCE_INSTANCE_NAME=$gce_instance_name \
                      -e GCE_SERVICE_ACCOUNT_ID=$gce_service_account_id \
                      -e GCE_SERVICE_ACCOUNT_EMAIL=$gce_service_account_email \
                      -e GCE_PROJECT_ID=$gce_project_id"

  env_args="$env_args $gce_env_args"
}

_set_gcp_token_payload() {
  local gcp_token_file="$1"

  if ! [ -f "$gcp_token_file" ]; then
    echo "GCP token file: '$gcp_token_file' not found."
    exit 1
  fi

  # read token and set env vars
  gcp_token=$(cat "$gcp_token_file")

  source ../ci/jwt/decode_token.sh

  DECODED_GCP_TOKEN_PAYLOAD=$(decode_jwt_payload "$gcp_token")
}

function fetch_gcf_tokens() {
  echo "-- ------------------------------------------------------ --"
  echo "-- Generate Google Cloud GCP Identity tokens from GCF URL --"
  echo "-- ------------------------------------------------------ --"

  local gcp_func_url=$1
  local token_prefix="tokens/gcf_"

  validate_gcf_url_accessible "$gcp_func_url" || exit 1

  cd ../ci/test_suites/authenticators_gcp/
  sh ./get_tokens_to_files.sh "$gcp_func_url" "$token_prefix" || exit 1
  cd -
  local decoded_gcf_token_payload=$(_get_gcp_token_payload "../ci/test_suites/authenticators_gcp/tokens/gcf_token_valid")

  echo "Setting GCF details as env variables"
  local gcf_service_account_id="$(echo "$decoded_gcf_token_payload" | jq -r '.sub')"
  local gcf_service_account_email="$(echo "$decoded_gcf_token_payload" | jq -r '.email')"

  local gce_env_args="-e GCF_SERVICE_ACCOUNT_ID=$gcf_service_account_id \
                      -e GCF_SERVICE_ACCOUNT_EMAIL=$gcf_service_account_email"

  env_args="$env_args $gce_env_args"

  echo "Finished obtaining and writing tokens to file"
}

function validate_gcf_url_accessible() {
  echo "Validating google cloud function is accessible"
  local gcp_func_url=$1
  local audience="dummy_host"

  sh ../ci/test_suites/authenticators_gcp/validate_gcf_url_accessible.sh "$gcp_func_url" "$audience" || exit 1
}

function enable_oidc() {
  add_keycloak_env_vars_to_env_args
}

function add_keycloak_env_vars_to_env_args() {
  echo "Extracting keycloak variables & setting as env variables"

  local keycloak_env_args=''
  keycloak_env_args="$(set -o pipefail; docker compose exec -T keycloak printenv | grep KEYCLOAK | sed 's/.*/-e &/') \
                     -e PROVIDER_URI=https://keycloak:8443/auth/realms/master \
                     -e PROVIDER_INTERNAL_URI=http://keycloak:8080/auth/realms/master/protocol/openid-connect \
                     -e PROVIDER_ISSUER=http://keycloak:8080/auth/realms/master \
                     -e ID_TOKEN_USER_PROPERTY=preferred_username"

  env_args="$env_args $keycloak_env_args"
}

function enable_jwt() {
  add_keycloak_env_vars_to_env_args
}

function enable_azure() {

  ../ci/authn-azure/check_dependencies.sh

  echo "Setting Azure details as env variables"

  local azure_env_args="-e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                        -e INFRAPOOL_AZURE_AUTHN_INSTANCE_IP=$INFRAPOOL_AZURE_AUTHN_INSTANCE_IP \
                        -e AZURE_AUTHN_INSTANCE_USERNAME=$AZURE_AUTHN_INSTANCE_USERNAME \
                        -e AZURE_AUTHN_INSTANCE_PASSWORD=$AZURE_AUTHN_INSTANCE_PASSWORD \
                        -e AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID \
                        -e AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP \
                        -e USER_ASSIGNED_IDENTITY=$USER_ASSIGNED_IDENTITY \
                        -e USER_ASSIGNED_IDENTITY_CLIENT_ID=$USER_ASSIGNED_IDENTITY_CLIENT_ID \
                        -e INFRAPOOL_SYSTEM_ASSIGNED_IDENTITY=$INFRAPOOL_SYSTEM_ASSIGNED_IDENTITY"

  env_args="$env_args $azure_env_args"
}

unset COMPOSE_PROJECT_NAME

while true ; do
  case "$1" in
    -h | --help ) print_help ; shift ;;
    exec )
      api_key=$(docker compose exec -T conjur conjurctl role retrieve-key cucumber:user:admin | tr -d '\r')
      env_args="-e CONJUR_AUTHN_API_KEY=$api_key"

      case "$2" in
        -h | --help ) print_exec_help ; shift ;;
        --authn-oidc ) enable_oidc ; shift ;;
        --authn-azure ) enable_azure ; shift ;;
        --authn-gcp ) handle_gcp "${@:3:4}"; shift 5;;
        --authn-jwt ) enable_jwt ; shift ;;
        * ) if [ -z "$2" ]; then shift ; else echo "$2 is not a valid option"; exit 1; fi;;
      esac

      docker exec "$env_args" -it --detach-keys 'ctrl-\' "$(docker compose ps -q conjur)" bash
     shift ;;
    policy )
      case "$2" in
        load )
          account="$3"
          policy_file=$4
          docker compose exec conjur conjurctl policy load "$account" "/src/conjur-server/$policy_file"
          shift 4 ;;
        * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
      esac ;;
    key ) docker compose exec -T conjur conjurctl role retrieve-key cucumber:user:admin ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done
