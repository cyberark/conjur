version: "3"
services:
  pg:
    image: postgres:15
    environment:
      # To avoid the following error:
      #
      #   Error: Database is uninitialized and superuser password is not
      #   specified.  You must specify POSTGRES_PASSWORD for the superuser. Use
      #   "-e POSTGRES_PASSWORD=password" to set it in "docker run".
      #
      #   You may also use POSTGRES_HOST_AUTH_METHOD=trust to allow all
      #   connections without a password. This is *not* recommended. See
      #   PostgreSQL documentation about "trust"
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    expose:
      - "5432"


  audit:
    image: postgres:15
    environment:
      # See description on `pg` service for use of POSTGRES_HOST_AUTH_METHOD
      POSTGRES_HOST_AUTH_METHOD: trust

  testdb:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: postgres_secret

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"

  localstack:
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    environment:
      - SERVICES=sns,sqs,sts
      - DEBUG=1
      - SQS_ENDPOINT_STRATEGY=dynamic
    volumes:
      - "./localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  conjur:
    build:
      context: ../
      dockerfile: dev/Dockerfile.dev
    image: conjur-dev
    environment:
      CONJUR_APPLIANCE_URL: http://localhost:3000
      DATABASE_URL: postgres://postgres@pg/postgres
      CONJUR_ADMIN_PASSWORD: ADmin123!!!!
      CONJUR_ACCOUNT: cucumber
      CONJUR_PASSWORD_ALICE: SEcret12!!!!
      CONJUR_DATA_KEY:
      RAILS_ENV:
      CONJUR_LOG_LEVEL: debug
      TENANT_ID: mytenant
      TOPIC_ARN: arn:aws:sns:us-east-1:0000000000000:developer.fifo
      ROLE_ARN_SNS: arn:aws:iam::0000000000000:role/developer
      TOPIC_NAME: MyDeveloperTopic.fifo
      TENANT_REGION: "us-east-1"
      REDIS_URL: redis://redis:6379
      AUDIT_DATABASE_URL:
      # TODO: Where should we be running rspec tests from, ideally?
      # See https://github.com/DatabaseCleaner/database_cleaner#safeguards
      DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: "true"
      BUNDLE_GEMFILE: /src/conjur-server/Gemfile
      # Adding the following envvars allows users to run Cucumber tests for
      # AuthnOIDC V2 with Okta and Identity from the dev environment.
      OKTA_CLIENT_ID: ${OKTA_CLIENT_ID:-}
      OKTA_CLIENT_SECRET: ${OKTA_CLIENT_SECRET:-}
      OKTA_PROVIDER_URI: ${OKTA_PROVIDER_URI:-}oauth2/default
      OKTA_USERNAME: ${OKTA_USERNAME:-}
      OKTA_PASSWORD: ${OKTA_PASSWORD:-}
      IDENTITY_CLIENT_ID: ${IDENTITY_CLIENT_ID:-}
      IDENTITY_CLIENT_SECRET: ${IDENTITY_CLIENT_SECRET:-}
      IDENTITY_PROVIDER_URI: ${IDENTITY_PROVIDER_URI:-}
      IDENTITY_USERNAME: ${IDENTITY_USERNAME:-}
      IDENTITY_PASSWORD: ${IDENTITY_PASSWORD:-}
    cap_add:
      - SYSLOG
    ports:
      - "3000:3000"
      - "1234:1234"
    expose:
      - "3000"
    volumes:
    - ..:/src/conjur-server
    - ../../conjur-policy-parser:/src/conjur-policy-parser
    - authn-local:/run/authn-local
    - ../ci/ldap-certs:/ldap-certs:ro
    # TODO: authenticators_oidc/test has a dep on this
    - ../ci/oauth/keycloak:/oauth/keycloak/scripts
    - jwks-volume:/var/jwks
    links:
    - redis:redis
    - pg:pg
    - ldap-server
    - keycloak
    - localstack:localstack

  cucumber:
    image: conjur-dev
    entrypoint: sleep
    command: infinity
    environment:
      LDAP_URI: ldap://ldap-server:389
      LDAP_BASE: dc=conjur,dc=net
      CONJUR_APPLIANCE_URL: http://conjur:3000
      DATABASE_URL: postgres://postgres@pg/postgres
      CONJUR_ADMIN_PASSWORD: ADmin123!!!!
      CONJUR_DATA_KEY:
      RAILS_ENV:
    volumes:
      - ..:/src/conjur-server
      - authn-local:/run/authn-local
      - ../ci/ldap-certs:/ldap-certs:ro
      - jwks-volume:/var/jwks
    links:
      - conjur
      - pg
      - testdb

  client:
    image: cyberark/conjur-cli:8
    entrypoint: sleep
    command: infinity
    environment:
      CONJUR_APPLIANCE_URL: http://conjur:3000
      CONJUR_ACCOUNT: cucumber
      CONJUR_AUTHN_LOGIN: admin
    links:
    - conjur:conjur
    volumes:
    - ..:/src/conjur-server

  ldap-server:
    image: osixia/openldap
    command: --copy-service --loglevel debug
    hostname: ldap-server
    environment:
      LDAP_ORGANISATION: CyberArk
      LDAP_DOMAIN: conjur.net
      LDAP_ADMIN_PASSWORD: ldapsecret
      LDAP_TLS_CA_CRT_FILENAME: "ca-chain.cert.pem"
      LDAP_TLS_CRT_FILENAME: "ldap-server.cert.pem"
      LDAP_TLS_KEY_FILENAME: "ldap-server.key.pem"
      LDAP_TLS_VERIFY_CLIENT: try

    volumes:
      - ./files/authn-ldap/ldap:/container/service/slapd/assets/config/bootstrap/ldif/custom
      - ../ci/ldap-certs:/container/service/slapd/assets/certs:ro

  keycloak:
    image: registry.tld/jboss/keycloak:4.3.0.Final
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - KEYCLOAK_APP_USER=alice
      - KEYCLOAK_APP_USER_PASSWORD=alice
      - KEYCLOAK_APP_USER_EMAIL=alice@conjur.net
      - KEYCLOAK_SECOND_APP_USER=bob.somebody
      - KEYCLOAK_SECOND_APP_USER_PASSWORD=bob
      - KEYCLOAK_SECOND_APP_USER_EMAIL=bob@conjur.net
      - KEYCLOAK_NON_CONJUR_APP_USER=not_in_conjur
      - KEYCLOAK_NON_CONJUR_APP_USER_PASSWORD=not_in_conjur
      - KEYCLOAK_NON_CONJUR_APP_USER_EMAIL=not_in_conjur
      - DB_VENDOR=H2
      - KEYCLOAK_CLIENT_ID=conjurClient
      - KEYCLOAK_REDIRECT_URI=http://conjur:3000/authn-oidc/keycloak2/cucumber/authenticate
      - KEYCLOAK_CLIENT_SECRET=1234
      - KEYCLOAK_SCOPE=openid
    ports:
      - "7777:8080"
    volumes:
      # TODO: authenticators_oidc/test has a dep on this
      - ../ci/oauth/keycloak:/scripts
      - ../ci/oauth/keycloak/standalone.xml:/opt/jboss/keycloak/standalone/configuration/standalone.xml

  okta-ldap-agent:
    image: weareenvoy/okta-ldap-agent
    volumes:
      - ./files/okta-ldap-agent/conf:/opt/Okta/OktaLDAPAgent/conf
    entrypoint: sleep
    command: infinity

  jwks:
    image: nginx
    networks:
      default:
        aliases:
          - chained.mycompany.local
    ports:
      - 8880:80
    volumes:
      - jwks-volume:/usr/share/nginx/html
      - ../ci/oauth/jwks/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../ci/oauth/jwks:/tmp
    entrypoint: sleep
    command: infinity

  jwks_py:
    image: python:3
    ports:
      - 8090:8090
    entrypoint:
      - bash
      - -c
    command:
      - |
        pip install -r /usr/src/jwks/requirements.txt
        python /usr/src/jwks/jwks_server.py -p 8090
    volumes:
      - ../ci/jwt/:/usr/src/jwks/

  prometheus:
    image: prom/prometheus
    volumes:
      - ./files/prometheus:/etc/prometheus
    ports:
      - 9090:9090
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml

  # Node exporter provides CPU and Memory metrics to Prometheus for the Docker
  # host machine.
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest

  ephemeral-secrets:
    image: 238637036211.dkr.ecr.us-east-1.amazonaws.com/mgmt-ephemeral-service-dev-repository-conjur:latest
    ports:
      - "8090:8080"

volumes:
  authn-local:
  jwks-volume:
